#!/usr/bin/python
# -*- coding: utf8 -*-
from dronekit import connect, VehicleMode, LocationGlobalRelative, LocationGlobal, Command
import time
import math
from pymavlink import mavutil
# Connect to the Vehicle (in this case a UDP endpoint)
vehicle = connect('tcp:127.0.0.1:14600', wait_ready=True)

def get_location_metres(original_location, dNorth, dEast):
    """
    Returns a LocationGlobal object containing the latitude/longitude `dNorth` and `dEast` metres from the 
    specified `original_location`. The returned Location has the same `alt` value
    as `original_location`.

    The function is useful when you want to move the vehicle around specifying locations relative to 
    the current vehicle position.
    The algorithm is relatively accurate over small distances (10m within 1km) except close to the poles.
    For more information see:
    http://gis.stackexchange.com/questions/2951/algorithm-for-offsetting-a-latitude-longitude-by-some-amount-of-meters
    """
    earth_radius=6378137.0 #Radius of "spherical" earth
    #Coordinate offsets in radians
    dLat = dNorth/earth_radius
    dLon = dEast/(earth_radius*math.cos(math.pi*original_location.lat/180))

    #New position in decimal degrees
    newlat = original_location.lat + (dLat * 180/math.pi)
    newlon = original_location.lon + (dLon * 180/math.pi)
    return LocationGlobal(newlat, newlon,original_location.alt)


def get_distance_metres(aLocation1, aLocation2):
    """
    Returns the ground distance in metres between two LocationGlobal objects.

    This method is an approximation, and will not be accurate over large distances and close to the 
    earth's poles. It comes from the ArduPilot test code: 
    https://github.com/diydrones/ardupilot/blob/master/Tools/autotest/common.py
    """
    dlat = aLocation2.lat - aLocation1.lat
    dlong = aLocation2.lon - aLocation1.lon
    return math.sqrt((dlat*dlat) + (dlong*dlong)) * 1.113195e5



def distance_to_current_waypoint():
    """
    Gets distance in metres to the current waypoint. 
    It returns None for the first waypoint (Home location).
    """
    nextwaypoint = vehicle.commands.next
    if nextwaypoint==0:
        return None
    missionitem=vehicle.commands[nextwaypoint-1] #commands are zero indexed
    lat = missionitem.x
    lon = missionitem.y
    alt = missionitem.z
    targetWaypointLocation = LocationGlobalRelative(lat,lon,alt)
    distancetopoint = get_distance_metres(vehicle.location.global_frame, targetWaypointLocation)
    return distancetopoint
	
def download_mission():
    """
    Download the current mission from the vehicle.
    """
    cmds = vehicle.commands
    cmds.download()
    cmds.wait_ready() # wait until download is complete.
	
def adds_square_mission(aLocation, aSize):
    """
    Adds a takeoff command and four waypoint commands to the current mission. 
    The waypoints are positioned to form a square of side length 2*aSize around the specified LocationGlobal (aLocation).

    The function assumes vehicle.commands matches the vehicle mission state 
    (you must have called download at least once in the session and after clearing the mission)
    """	

    cmds = vehicle.commands

    print " Clear any existing commands"
    cmds.clear() 
    
    print " Define/add new commands."
    # Add new commands. The meaning/order of the parameters is documented in the Command class. 
     
    #Add MAV_CMD_NAV_TAKEOFF command. This is ignored if the vehicle is already in the air.
    cmds.add(Command( 0, 0, 0, mavutil.mavlink.MAV_FRAME_GLOBAL_RELATIVE_ALT, mavutil.mavlink.MAV_CMD_NAV_TAKEOFF, 0, 0, 0, 0, 0, 0, 0, 0, 10))

    #Define the four MAV_CMD_NAV_WAYPOINT locations and add the commands
    point1 = get_location_metres(aLocation, aSize, -aSize)
    point2 = get_location_metres(aLocation, aSize, aSize)
    point3 = get_location_metres(aLocation, -aSize, aSize)
    point4 = get_location_metres(aLocation, -aSize, -aSize)
    cmds.add(Command( 0, 0, 0, mavutil.mavlink.MAV_FRAME_GLOBAL_RELATIVE_ALT, mavutil.mavlink.MAV_CMD_NAV_WAYPOINT, 0, 0, 0, 0, 0, 0, point1.lat, point1.lon, 11))
    cmds.add(Command( 0, 0, 0, mavutil.mavlink.MAV_FRAME_GLOBAL_RELATIVE_ALT, mavutil.mavlink.MAV_CMD_NAV_WAYPOINT, 0, 0, 0, 0, 0, 0, point2.lat, point2.lon, 12))
    cmds.add(Command( 0, 0, 0, mavutil.mavlink.MAV_FRAME_GLOBAL_RELATIVE_ALT, mavutil.mavlink.MAV_CMD_NAV_WAYPOINT, 0, 0, 0, 0, 0, 0, point3.lat, point3.lon, 13))
    cmds.add(Command( 0, 0, 0, mavutil.mavlink.MAV_FRAME_GLOBAL_RELATIVE_ALT, mavutil.mavlink.MAV_CMD_NAV_WAYPOINT, 0, 0, 0, 0, 0, 0, point4.lat, point4.lon, 14))
    #add dummy waypoint "5" at point 4 (lets us know when have reached destination)
    cmds.add(Command( 0, 0, 0, mavutil.mavlink.MAV_FRAME_GLOBAL_RELATIVE_ALT, mavutil.mavlink.MAV_CMD_NAV_WAYPOINT, 0, 0, 0, 0, 0, 0, point4.lat, point4.lon, 14))    

    print " Upload new commands to vehicle"
    cmds.upload()


def arm_and_takeoff(aTargetAltitude):
    """
    Arms vehicle and fly to aTargetAltitude.
    """

    print "Basic pre-arm checks"
    # Don't let the user try to arm until autopilot is ready
    while not vehicle.is_armable:
        print " Waiting for vehicle to initialise..."
        time.sleep(1)

        
    print "Arming motors"
    # Copter should arm in GUIDED mode
    vehicle.mode = VehicleMode("GUIDED")
    vehicle.armed = True

    while not vehicle.armed:      
        print " Waiting for arming..."
        time.sleep(1)

    print "Taking off!"
    vehicle.simple_takeoff(aTargetAltitude) # Take off to target altitude

    # Wait until the vehicle reaches a safe height before processing the goto (otherwise the command 
    #  after Vehicle.simple_takeoff will execute immediately).
    while True:
        print " Altitude: ", vehicle.location.global_relative_frame.alt      
        if vehicle.location.global_relative_frame.alt>=aTargetAltitude*0.95: #Trigger just below target alt.
            print "Reached target altitude"
            break
        time.sleep(1)
		
def get_ip():
    import http.client
    conn = http.client.HTTPConnection("smirart.ru")
    conn.request("GET", "/ip")
    return conn.getresponse().read()
def get_status(vehicle):
    # Get some vehicle attributes (state)
    buf = "Get some vehicle attribute values:"+\
          "\nGPS: %s" % vehicle.gps_0+\
          "\nBattery: %s" % vehicle.battery+\
          "\nLast Heartbeat: %s" % vehicle.last_heartbeat+\
          "\nIs Armable?: %s" % vehicle.is_armable+\
          "\nSystem status: %s" % vehicle.system_status.state+\
          "\nMode: %s" % vehicle.mode.name    # settable
    return buf
vehicle = None #для доступности в finally
try:
    # START TELEGRAM BOT
    import sys, telepot
    def handle(msg):
        """хендлер выполняется в отдельном потоке, вызывается событием на подобие блокирующей очереди"""
        content_type, chat_type, chat_id = telepot.glance(msg)
        print(content_type, chat_type, chat_id)
        if chat_id == 62922848:
            if content_type == 'text':
                if msg['text'] == '/start':
                    # попытка совершения полета в указанную точку в режиме APM AUTO
                    bot.sendMessage(chat_id, 'try starting mission...')
                    adds_square_mission(vehicle.location.global_frame,50)
                    arm_and_takeoff(10)
                    vehicle.commands.next=0
                    vehicle.mode = VehicleMode("AUTO"
                elif msg['text'] == '/status':
                    # вывод информации о коптере, ip, заряд батареи
                    #bot.sendMessage(chat_id, 'preparing status...')
                    bot.sendMessage(62922848, "copter ip: %s" % get_ip() + '\n' + get_status(vehicle) + '\nSTATE: %s' % STATE)
                elif msg['text'] == '/stop':
                    # остановка всех операций в MACHINE STATE и перевод в IDLE
                    bot.sendMessage(chat_id, 'stop all operations, go to IDLE STATE')
                elif msg['text'] == '/help':
                    bot.sendMessage(chat_id,
                                    'This Bot created for control copter\nА вообще во мне семь всевдопараллельных потоков и меня это устраивает')
                else:
                    bot.sendMessage(chat_id, 'Bad command!')
            elif content_type == 'location':
                # расчет возможности полета в заданные координаты и построение полетного задания
                #bot.sendMessage(chat_id, 'preparing mission...')
                bot.sendMessage(chat_id, str(msg['location']['latitude'])+'\n'+str(msg['location']['longitude']))
            else:
                bot.sendMessage(chat_id, 'Bad command!')
        else:
            bot.sendMessage(chat_id, 'Access error!')
    TOKEN = sys.argv[1]  # get token from command-line
    bot = telepot.Bot(TOKEN)
    bot.message_loop(handle)
    print ('Listening ...')
    ###########################################
    # Import DroneKit-Python

    # здесь же запуск вспомогательных потоков
    ###########################################
    bot.sendMessage(62922848, "Starting main daemon, copter is online: %s" % get_ip())
    import time
    # Keep the program running.
    STATE = 'IDLE'
    while 1:
        if STATE == 'IDLE':
            pass
        elif STATE == 'FLY':
            pass
        elif STATE == 'EMERGY_STOP':
            pass
        else:
            pass
        time.sleep(1000)
finally:
    # Close vehicle object before exiting script
    if vehicle!=None:
        vehicle.close()
        print('\n######################################################')
        print('\nFinally success!\n')
        print('######################################################\n')
